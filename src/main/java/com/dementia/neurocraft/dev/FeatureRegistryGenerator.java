package com.dementia.neurocraft.dev;

import com.dementia.neurocraft.client.features.ClientFeatureController;
import com.dementia.neurocraft.common.features.Feature;
import com.dementia.neurocraft.server.features.ServerFeatureController;

import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.Path;
import java.util.List;
import java.util.stream.Collectors;

public final class FeatureRegistryGenerator {
    private static final Path REGISTRY_FILE = Path.of("src/main/java/com/dementia/neurocraft/common/features/FeatureRegistry.java");

    public static void main(String[] args) throws IOException {
        // Get all features from controllers
        List<String> clientFeatureIds = ClientFeatureController.getFeatures().stream()
                .map(Feature::getId)
                .collect(Collectors.toList());
        
        List<String> serverFeatureIds = ServerFeatureController.getFeatures().stream()
                .map(Feature::getId)
                .collect(Collectors.toList());

        // Generate the registry file content
        String content = generateRegistryContent(clientFeatureIds, serverFeatureIds);

        // Write to file
        try (FileWriter writer = new FileWriter(REGISTRY_FILE.toFile())) {
            writer.write(content);
        }

        System.out.println("Generated FeatureRegistry.java with:");
        System.out.println("  - " + clientFeatureIds.size() + " client features");
        System.out.println("  - " + serverFeatureIds.size() + " server features");
    }

    private static String generateRegistryContent(List<String> clientIds, List<String> serverIds) {
        StringBuilder sb = new StringBuilder();
        
        sb.append("package com.dementia.neurocraft.common.features;\n\n");
        sb.append("import java.util.ArrayList;\n");
        sb.append("import java.util.Arrays;\n");
        sb.append("import java.util.List;\n\n");
        sb.append("/**\n");
        sb.append(" * AUTO-GENERATED: Shared registry of all feature IDs that can be accessed from both client and server.\n");
        sb.append(" * This prevents server configs from depending on client-only classes.\n");
        sb.append(" * \n");
        sb.append(" * Generated by FeatureRegistryGenerator - DO NOT EDIT MANUALLY!\n");
        sb.append(" */\n");
        sb.append("public class FeatureRegistry {\n\n");
        
        // Client feature IDs
        sb.append("    public static final List<String> CLIENT_FEATURE_IDS = Arrays.asList(\n");
        for (int i = 0; i < clientIds.size(); i++) {
            sb.append("        \"").append(clientIds.get(i)).append("\"");
            if (i < clientIds.size() - 1) sb.append(",");
            sb.append("\n");
        }
        sb.append("    );\n\n");
        
        // Server feature IDs
        sb.append("    public static final List<String> SERVER_FEATURE_IDS = Arrays.asList(\n");
        for (int i = 0; i < serverIds.size(); i++) {
            sb.append("        \"").append(serverIds.get(i)).append("\"");
            if (i < serverIds.size() - 1) sb.append(",");
            sb.append("\n");
        }
        sb.append("    );\n\n");
        
        // Helper method
        sb.append("    /**\n");
        sb.append("     * Get all feature IDs (both client and server)\n");
        sb.append("     */\n");
        sb.append("    public static List<String> getAllFeatureIds() {\n");
        sb.append("        List<String> allIds = new ArrayList<>(CLIENT_FEATURE_IDS);\n");
        sb.append("        // Add server IDs that aren't already in client list\n");
        sb.append("        SERVER_FEATURE_IDS.forEach(id -> {\n");
        sb.append("            if (!allIds.contains(id)) {\n");
        sb.append("                allIds.add(id);\n");
        sb.append("            }\n");
        sb.append("        });\n");
        sb.append("        return allIds;\n");
        sb.append("    }\n");
        sb.append("}\n");
        
        return sb.toString();
    }
} 