plugins {
    id 'eclipse'
    id 'idea'
    id 'maven-publish'
    id 'net.minecraftforge.gradle' version '[6.0.16,6.2)'
    id 'org.spongepowered.mixin' version '0.7.+'
}

version = mod_version
group = mod_group_id

base {
    archivesName = mod_id
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: mapping_channel, version: mapping_version
    copyIdeResources = true
    runs {
        configureEach {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
        }

        client {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        server {
            property 'forge.enabledGameTestNamespaces', mod_id
            args '--nogui'
        }

        gameTestServer {
            property 'forge.enabledGameTestNamespaces', mod_id
        }

        data {
            workingDirectory project.file('run-data')
            args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

mixin {
    add sourceSets.main, 'neurocraft.mixins.refmap.json'
    config 'neurocraft.mixins.client.json'
    config 'neurocraft.mixins.common.json'
    showMessageTypes = true
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // ByteBuddy core + agent
    implementation "net.bytebuddy:byte-buddy:1.17.5"
    implementation "net.bytebuddy:byte-buddy-agent:1.17.5"

    // Shade into the output JAR via FG jarJar
    jarJar(group: "net.bytebuddy", name: "byte-buddy", version: "[1.17.5]")
    jarJar(group: "net.bytebuddy", name: "byte-buddy-agent", version: "[1.17.5]")
}

tasks.register('updateLang', JavaExec) {
    group = 'development'
    description = 'Scans Feature classes and updates en_us.json with any missing config display names.'

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.dementia.neurocraft.dev.FeatureLangUpdater')

    doFirst {
        println "Running FeatureLangUpdater to patch en_us.json..."
    }
}

// === FEATURE REGISTRY AUTO-GENERATION ===
// The FeatureRegistry.java file is automatically generated from actual Feature classes.
// This prevents manual maintenance and ensures consistency between features and configs.
//
// WORKFLOW:
// 1. Add/remove features in ClientFeatureController or ServerFeatureController
// 2. Run: ./gradlew updateFeatureRegistry
// 3. Run: ./gradlew build (to compile with updated registry)
// 4. Commit both your feature changes AND the updated FeatureRegistry.java

tasks.register('generateFeatureRegistry', JavaExec) {
    group = 'development'
    description = 'Automatically generates FeatureRegistry.java from actual feature controllers.'

    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.dementia.neurocraft.dev.FeatureRegistryGenerator')
    
    // Run after classes are compiled
    dependsOn 'classes'

    doFirst {
        println "Running FeatureRegistryGenerator to auto-generate FeatureRegistry.java..."
    }
}

tasks.named('processResources', ProcessResources).configure {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            forge_version       : forge_version, forge_version_range: forge_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
            mod_authors         : mod_authors, mod_description: mod_description,
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

tasks.named('jar', Jar).configure {
    manifest {
        attributes([
                'Specification-Title'        : mod_id,
                'Specification-Vendor'       : mod_authors,
                'Specification-Version'      : '1',
                'Implementation-Title'       : project.name,
                'Implementation-Version'     : project.jar.archiveVersion,
                'Implementation-Vendor'      : mod_authors,
                'TweakClass'                 : 'org.spongepowered.asm.launch.MixinTweaker',
                'MixinConfigs'               : 'neurocraft.mixins.client.json,neurocraft.mixins.common.json',
                'FMLCorePluginContainsFMLMod': 'true',
        ])
    }

    // Apply the jarJar transformations
    from {
        configurations.runtimeClasspath
                .filter { it.name.contains("byte-buddy") }
                .collect { zipTree(it) }
    } {
        exclude 'META-INF/versions/**'
        exclude '**/*.dll', '**/*.so', '**/*.dylib'
        exclude 'win32-*/*'
    }

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

eclipse {
    synchronizationTasks 'genEclipseRuns'
}

// Convenience task for updating feature registry when features are added/removed
tasks.register('updateFeatureRegistry') {
    group = 'development'
    description = 'MANUAL: Run when adding/removing features. Compiles -> Generates Registry -> Cleans for recompile'
    
    dependsOn 'generateFeatureRegistry'
    
    doLast {
        println "✅ FeatureRegistry.java has been updated!"
        println "📝 Next: Run './gradlew build' to compile with the new registry."
        
        // Clean compiled classes to ensure fresh compilation
        delete fileTree('build/classes/java/main/com/dementia/neurocraft/common/features')
    }
}

tasks.named('build') {
    dependsOn tasks.named('updateLang')
}

sourceSets.each {
    def dir = layout.buildDirectory.dir("sourcesSets/$it.name")
    it.output.resourcesDir = dir
    it.java.destinationDirectory = dir
}
